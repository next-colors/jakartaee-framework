/*
 * (C) 2017 NEXT COLORS Co., Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
//-----------------------------------------------------------------------------
//    Plugins
//-----------------------------------------------------------------------------
plugins {
    id 'java-library'
    id 'jacoco'
    id 'eclipse-wtp'
    id 'com.github.ben-manes.versions' version '0.20.0'
    id 'com.vanniktech.dependency.graph.generator' version '0.5.0'
    id 'io.franzbecker.gradle-lombok' version '2.0'
}

//-----------------------------------------------------------------------------
//    Import Classes
//-----------------------------------------------------------------------------
import java.nio.charset.StandardCharsets
import org.gradle.plugins.ide.eclipse.model.ClasspathEntry
import org.gradle.plugins.ide.eclipse.model.Facet.FacetType
import org.gradle.plugins.ide.eclipse.model.Library
import io.franzbecker.gradle.lombok.task.DelombokTask

//-----------------------------------------------------------------------------
//    Constant Properties
//-----------------------------------------------------------------------------
// ビルド出力ディレクトリ
buildDir = getProperty( 'build.dir.output' )
// コンパイル時の Java バージョン
sourceCompatibility = JavaVersion.VERSION_1_8
// クラス生成時の Java バージョン
targetCompatibility = JavaVersion.VERSION_1_8
// コンパイル時に使用する文字エンコーディング
tasks.withType( AbstractCompile )*.options*.encoding = StandardCharsets.UTF_8

//-----------------------------------------------------------------------------
//    Dependency Management
//-----------------------------------------------------------------------------
// ライブラリ取得先リポジトリ
repositories {
    // JCenter リポジトリ
    jcenter()

    // Maven セントラルリポジトリ
    mavenCentral()
}

// 依存関係の設定
dependencies {
    // アノテーションプロセッサ
    annotationProcessor(
        'org.projectlombok:lombok:latest.release'
    )

    // パッケージに含めるライブラリ
    api(
        'com.fasterxml.jackson.core:jackson-databind:latest.release',
        'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:latest.release',
        'com.google.guava:guava:latest.release',
        'com.miragesql:miragesql:latest.release',
        'commons-beanutils:commons-beanutils:latest.release',
        'commons-codec:commons-codec:latest.release',
        'commons-io:commons-io:latest.release',
        'io.github.classgraph:classgraph:latest.release',
        'org.apache.commons:commons-collections4:latest.release',
        'org.apache.commons:commons-lang3:latest.release',
        'org.jooq:jool-java-8:latest.release',
        'org.jooq:jooq:latest.release',
        'org.slf4j:slf4j-api:latest.release'
    )

    // コンパイル時にのみ必要なライブラリ
    compileOnly(
        'com.sun.faces:jsf-impl:latest.release',
        'javax:javaee-api:latest.release'
    )
    // アノテーションプロセッサをパッケージから除外
    compileOnly(
        configurations.annotationProcessor
    )

    // テスト時にのみ必要なライブラリ
    testImplementation(
        'org.dbunit:dbunit:latest.release',
        'org.hamcrest:hamcrest:latest.release',
        'org.jmockit:jmockit:latest.release',
        'org.junit.jupiter:junit-jupiter-api:latest.release'
    )

    // テスト実行時にのみ必要なライブラリ
    testRuntimeOnly(
        'org.junit.jupiter:junit-jupiter-engine:latest.release'
    )
}

//-----------------------------------------------------------------------------
//    Tasks
//-----------------------------------------------------------------------------
// JUnit でテストするタスク
test {
    useJUnitPlatform()

    ignoreFailures = true

    jacoco {
        destinationFile = file( "${buildDir}/jacoco/jacocoTest.exec" )
        classDumpDir = file( "${buildDir}/jacoco/classpathdumps" )
    }
}

// Lombok のタスク
lombok {
    version = getProperty( 'lombok.version' )
}

// Lombok による変換後のソースコードを生成するためのタスク
tasks.register( 'delombok', DelombokTask ) {
    description = 'Generates delomboked sources.'

    classpath += compileJava.classpath

    ext.outputDir = file( "${buildDir}/${name}" )

    sourceSets.all {
        if ( it.name != SourceSet.TEST_SOURCE_SET_NAME ) {
            it.allJava.srcDirs.each {
                args( it, '-d', outputDir )
            }
        }
    }

    doFirst {
        outputDir.deleteDir()
    }
}

// Lombok による変換後のソースコードを生成する際のヘルプを表示するためのタスク
tasks.register( 'delombokHelp', DelombokTask ) {
    description = 'Displays the help about delomboking.'

    args( '--help' )
}

// Lombok による変換後のソースコードを生成する際のフォーマットに関するヘルプを表示するためのタスク
tasks.register( 'delombokFormatHelp', DelombokTask ) {
    description = 'Displays the help about the format of delomboking.'

    args( '--format-help' )
}

// Javadoc のタスク
javadoc {
    dependsOn( delombok )

    source = delombok.outputDir
    failOnError = false

    options {
        encoding = StandardCharsets.UTF_8
        charSet = StandardCharsets.UTF_8
        author = true
        links(
            'https://commons.apache.org/proper/commons-beanutils/apidocs/',
            'https://commons.apache.org/proper/commons-codec/apidocs/',
            'https://commons.apache.org/proper/commons-collections/apidocs/',
            'https://commons.apache.org/proper/commons-io/javadocs/api-release/',
            'https://commons.apache.org/proper/commons-lang/apidocs/',
            'https://docs.oracle.com/javase/jp/8/docs/api/',
            'https://fasterxml.github.io/jackson-annotations/javadoc/2.9/',
            'https://fasterxml.github.io/jackson-core/javadoc/2.9/',
            'https://fasterxml.github.io/jackson-databind/javadoc/2.9/',
            'https://fasterxml.github.io/jackson-dataformats-binary/javadoc/cbor/2.9/',
            'https://google.github.io/guava/releases/27.0.1-jre/api/docs/',
            'https://javaee.github.io/javaee-spec/javadocs/',
            'https://projectlombok.org/api/',
            'https://www.javadoc.io/doc/com.miragesql/miragesql/',
            'https://www.javadoc.io/doc/io.github.classgraph/classgraph/',
            'https://www.jooq.org/javadoc/3.11.x/',
            'https://www.jooq.org/products/jOO%CE%BB/javadoc/latest/',
            'https://www.slf4j.org/apidocs/'
        )
    }
}

// Eclipse プロジェクトのタスク
eclipse {
    // .project の設定
    project {
        // Gradle ネーチャーを追加
        natures( 'org.eclipse.buildship.core.gradleprojectnature' )
        buildCommand( 'org.eclipse.buildship.core.gradleprojectbuilder' )
    }

    // .classpath の設定
    classpath {
        file {
            whenMerged {
                // ライブラリ
                Collection<ClasspathEntry> libraries = it.entries.findAll {
                    it instanceof Library
                }

                // ライブラリ以外
                Collection<ClasspathEntry> others = it.entries - libraries

                // ファイル名でソート
                libraries.sort {
                    file( it.path ).name
                }

                it.entries = others + libraries
            }
        }
    }

    // WTP（Web Tools Platform）の設定
    wtp {
        // プロジェクト・ファセットの設定
        facet {
            // Java
            facet( type: FacetType.fixed, name: 'java' )
            facet( type: FacetType.installed, name: 'java', version: JavaVersion.VERSION_1_8 )

            file {
                beforeMerged {
                    // 既存の設定内容をクリア
                    it.facets.clear()
                }

                whenMerged {
                    // ファセットの種類、ファセット名でソート
                    it.facets.sort { facet1, facet2 ->
                        if ( facet1.type == facet2.type ) {
                            facet1.name <=> facet2.name
                        }
                        else {
                            facet1.type.name() <=> facet2.type.name()
                        }
                    }
                }
            }
        }
    }
}
// Eclipse Plugin は eclipse という名前でタスクと拡張オブジェクトの 2 つを定義する。
// project.eclipse で参照したオブジェクトは拡張オブジェクトの方になる。
// タスクを参照したい場合は、 tasks.eclipse のように TaskContainer を経由する必要がある。
tasks.eclipse {
    doFirst {
        // Buildship の設定
        file( '.settings/org.eclipse.buildship.core.prefs' ).withWriter {
            it.println( "connection.project.dir=${projectDir.relativePath( rootDir )}" )
            it.println( 'eclipse.preferences.version=1' )
        }
    }
}
