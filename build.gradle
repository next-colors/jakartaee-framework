/*
 * (C) 2017 NEXT COLORS Co., Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
//-----------------------------------------------------------------------------
//    Plugins
//-----------------------------------------------------------------------------
plugins {
    id('java-library')
    id('jacoco')
    id('eclipse-wtp')
    id('com.github.ben-manes.versions') version 'latest.release'
    id('com.vanniktech.dependency.graph.generator') version 'latest.release'
    id('io.franzbecker.gradle-lombok') version 'latest.release'
}

//-----------------------------------------------------------------------------
//    Import Classes
//-----------------------------------------------------------------------------
import java.nio.charset.StandardCharsets
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import io.franzbecker.gradle.lombok.task.DelombokTask

//-----------------------------------------------------------------------------
//    Constant Properties
//-----------------------------------------------------------------------------
// ビルド出力ディレクトリ
layout.buildDirectory = layout.projectDirectory.dir(getProperty('build.dir.output'))

//-----------------------------------------------------------------------------
//    Dependency Management
//-----------------------------------------------------------------------------
// コンフィギュレーションの設定
configurations {
    // テスト時にのみ必要なライブラリに、コンパイル時にのみ必要なライブラリを追加
    testImplementation.extendsFrom(compileOnly)
}

// ライブラリ取得先リポジトリ
repositories {
    // Maven セントラルリポジトリ
    mavenCentral()
}

// 依存関係の設定
dependencies {
    // アノテーションプロセッサ
    annotationProcessor('org.projectlombok:lombok:latest.release')

    // パッケージに含めるライブラリ
    api('commons-beanutils:commons-beanutils:latest.release')
    api('commons-codec:commons-codec:latest.release')
    api('commons-io:commons-io:latest.release')
    api('io.github.classgraph:classgraph:latest.release')
    api('io.github.toolfactory:jvm-driver:latest.release')
    api('jp.co.future:uroborosql:latest.release')
    api('ognl:ognl:latest.release')
    api('org.apache.commons:commons-collections4:latest.release')
    api('org.apache.commons:commons-lang3:latest.release')
    api('org.jooq:jool:latest.release')
    api('org.jooq:jooq:latest.release')
    api('org.slf4j:slf4j-api:latest.release')

    // コンパイル時にのみ必要なライブラリ
    compileOnly('jakarta.platform:jakarta.jakartaee-api:8.+')
    compileOnly('org.glassfish:javax.faces:latest.release')

    // テスト時にのみ必要なライブラリ
    testImplementation('com.ninja-squad:DbSetup:latest.release')
    testImplementation('org.assertj:assertj-core:latest.release')
    testImplementation('org.assertj:assertj-db:latest.release')
    testImplementation('org.junit.jupiter:junit-jupiter-api:latest.release')
    testImplementation('org.mockito:mockito-inline:latest.release')
    testImplementation('org.mockito:mockito-junit-jupiter:latest.release')

    // テスト実行時にのみ必要なライブラリ
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:latest.release')
}

//-----------------------------------------------------------------------------
//    Plugin Configurations
//-----------------------------------------------------------------------------
// Java Plugin の設定
java {
    toolchain {
        // ビルド時に使用する Java のバージョン
        languageVersion = JavaLanguageVersion.of(JavaVersion.VERSION_17.majorVersion)
    }
}

// Gradle Lombok Plugin の設定
lombok {
    version = getProperty('lombok.version')
    sha256 = getProperty('lombok.checksum.sha256')
}

// Eclipse Plugin の設定
eclipse {
    // .project の設定
    project {
        // Gradle ネーチャーを追加
        natures('org.eclipse.buildship.core.gradleprojectnature')
        buildCommand('org.eclipse.buildship.core.gradleprojectbuilder')
    }

    // WTP（Web Tools Platform）の設定
    wtp {
        // プロジェクト・ファセットの設定
        facet {
            file {
                whenMerged {
                    // ファセットの種類、ファセット名でソート
                    facets.sort { facet1, facet2 ->
                        if (facet1.type == facet2.type) {
                            facet1.name <=> facet2.name
                        }
                        else {
                            facet2.type <=> facet1.type
                        }
                    }
                }
            }
        }
    }
}

//-----------------------------------------------------------------------------
//    Tasks
//-----------------------------------------------------------------------------
// JVM 言語でコンパイルするタスク
tasks.withType(AbstractCompile).configureEach {
    options.encoding = StandardCharsets.UTF_8
}

// JAR ファイルを構築するタスク
tasks.jar {
    // マニフェストファイル
    manifest {
        attributes['Created-By'] = GradleVersion.current()
        attributes['Build-Jdk'] = System.getProperty('java.vm.version')
    }
}

// JUnit でテストするタスク
tasks.test {
    useJUnitPlatform()

    systemProperties['junit.jupiter.execution.parallel.enabled'] = true
    systemProperties['junit.jupiter.execution.parallel.mode.default'] = 'concurrent'

    ignoreFailures = true
    maxParallelForks = Math.max(Runtime.runtime.availableProcessors().intdiv(2), 1)

    testLogging {
        exceptionFormat = TestExceptionFormat.FULL
    }

    jacoco {
        destinationFile = layout.buildDirectory.file('jacoco/jacocoTest.exec').get().asFile
        classDumpDir = layout.buildDirectory.dir('jacoco/classpathdumps').get().asFile
    }
}

// Lombok による変換後のソースコードを生成するタスク
tasks.register('delombok', DelombokTask) {
    description = 'Generates delomboked sources.'

    group = lombok.NAME

    dependsOn(tasks.compileJava)

    ext.outputDir = layout.buildDirectory.dir(name).get()

    outputs.dir(outputDir)

    sourceSets.main.java.srcDirs.each {
        if (it.exists()) {
            inputs.dir(it)

            args(it, '-d', outputDir)
        }
    }

    doFirst {
        delete(outputDir)
    }
}

// Lombok による変換後のソースコードを生成する際のヘルプを表示するタスク
tasks.register('delombokHelp', DelombokTask) {
    description = 'Displays the help about delomboking.'

    group = tasks.delombok.group

    args('--help')
}

// Lombok による変換後のソースコードを生成する際のフォーマットに関するヘルプを表示するタスク
tasks.register('delombokFormatHelp', DelombokTask) {
    description = 'Displays the help about the format of delomboking.'

    group = tasks.delombok.group

    args('--format-help')
}

// Javadoc のタスク
tasks.javadoc {
    dependsOn(tasks.delombok)

    source = tasks.delombok.outputDir
    failOnError = false

    options {
        encoding = StandardCharsets.UTF_8
        author = true
        links(
            'https://commons.apache.org/proper/commons-beanutils/apidocs/',
            'https://commons.apache.org/proper/commons-codec/apidocs/',
            'https://commons.apache.org/proper/commons-collections/apidocs/',
            'https://commons.apache.org/proper/commons-io/javadocs/api-release/',
            'https://commons.apache.org/proper/commons-lang/apidocs/',
            'https://docs.oracle.com/javase/jp/17/docs/api/',
            'https://jakarta.ee/specifications/platform/8/apidocs/',
            'https://javadoc.io/doc/io.github.classgraph/classgraph/',
            'https://javadoc.io/doc/jp.co.future/uroborosql/',
            'https://projectlombok.org/api/',
            'https://www.jooq.org/javadoc/latest/',
            'https://www.jooq.org/products/jOO%CE%BB/javadoc/latest/',
            'https://www.slf4j.org/apidocs/'
        )
    }
}

// Eclipse プロジェクトのタスク
tasks.eclipse {
    doFirst {
        // Buildship の設定
        layout.projectDirectory.file('.settings/org.eclipse.buildship.core.prefs').asFile.withWriter {
            it.println("connection.project.dir=${relativePath(rootDir)}")
            it.println('eclipse.preferences.version=1')
        }
    }
}
