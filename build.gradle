/*
 * (C) 2017 NEXT COLORS Co., Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
//-----------------------------------------------------------------------------
//    Plugins
//-----------------------------------------------------------------------------
plugins {
    id 'java-library'
    id 'jacoco'
    id 'eclipse-wtp'
    id 'com.github.ben-manes.versions' version 'latest.release'
    id 'com.vanniktech.dependency.graph.generator' version 'latest.release'
    id 'io.franzbecker.gradle-lombok' version 'latest.release'
}

//-----------------------------------------------------------------------------
//    Import Classes
//-----------------------------------------------------------------------------
import java.nio.charset.StandardCharsets
import org.gradle.plugins.ide.eclipse.model.ClasspathEntry
import org.gradle.plugins.ide.eclipse.model.Library
import io.franzbecker.gradle.lombok.task.DelombokTask

//-----------------------------------------------------------------------------
//    Constant Properties
//-----------------------------------------------------------------------------
// ビルド出力ディレクトリ
buildDir = getProperty('build.dir.output')
// コンパイル時に使用する文字エンコーディング
tasks.withType(AbstractCompile).configureEach {
    options*.encoding = StandardCharsets.UTF_8
}

//-----------------------------------------------------------------------------
//    Dependency Management
//-----------------------------------------------------------------------------
// コンフィギュレーションの設定
configurations {
    // JMockit のためのコンフィギュレーション
    jmockit

    // テスト時にのみ必要なライブラリに、コンパイル時にのみ必要なライブラリを追加
    testImplementation.extendsFrom(compileOnly)
}

// ライブラリ取得先リポジトリ
repositories {
    // Maven セントラルリポジトリ
    mavenCentral()
}

// 依存関係の設定
dependencies {
    // アノテーションプロセッサ
    annotationProcessor(
        'org.projectlombok:lombok:latest.release'
    )

    // パッケージに含めるライブラリ
    api(
        'com.google.guava:guava:latest.release',
        'commons-beanutils:commons-beanutils:latest.release',
        'commons-codec:commons-codec:latest.release',
        'commons-io:commons-io:latest.release',
        'io.github.classgraph:classgraph:latest.release',
        'io.github.toolfactory:jvm-driver:latest.release',
        'jp.co.future:uroborosql:latest.release',
        'ognl:ognl:latest.release',
        'org.apache.commons:commons-collections4:latest.release',
        'org.apache.commons:commons-lang3:latest.release',
        'org.jooq:jool:latest.release',
        'org.jooq:jooq:latest.release',
        'org.slf4j:slf4j-api:latest.release'
    )

    // コンパイル時にのみ必要なライブラリ
    compileOnly(
        'jakarta.platform:jakarta.jakartaee-api:8.+',
        'org.glassfish:javax.faces:latest.release'
    )

    // テスト時にのみ必要なライブラリ
    testImplementation(
        'com.ninja-squad:DbSetup:latest.release',
        'org.assertj:assertj-core:latest.release',
        'org.assertj:assertj-db:latest.release',
        'org.junit.jupiter:junit-jupiter-api:latest.release',
        configurations.jmockit
    )

    // テスト実行時にのみ必要なライブラリ
    testRuntimeOnly(
        'org.junit.jupiter:junit-jupiter-engine:latest.release'
    )

    // JMockit のライブラリ
    jmockit(
        'org.jmockit:jmockit:latest.release'
    )
}

//-----------------------------------------------------------------------------
//    Plugin Configurations
//-----------------------------------------------------------------------------
// Java Plugin の設定
java {
    toolchain {
        // ビルド時に使用する Java のバージョン
        languageVersion = JavaLanguageVersion.of(JavaVersion.VERSION_17.majorVersion)
    }
}

// Gradle Lombok Plugin の設定
lombok {
    version = getProperty('lombok.version')
}

// Eclipse Plugin の設定
eclipse {
    // .project の設定
    project {
        // Gradle ネーチャーを追加
        natures('org.eclipse.buildship.core.gradleprojectnature')
        buildCommand('org.eclipse.buildship.core.gradleprojectbuilder')
    }

    // .classpath の設定
    classpath {
        file {
            whenMerged {
                // ライブラリ
                Collection<ClasspathEntry> libraries = it.entries.findAll {
                    it instanceof Library
                }

                // ライブラリ以外
                Collection<ClasspathEntry> others = it.entries - libraries

                // ファイル名でソート
                libraries.sort {
                    file(it.path).name
                }

                it.entries = others + libraries
            }
        }
    }

    // WTP（Web Tools Platform）の設定
    wtp {
        // プロジェクト・ファセットの設定
        facet {
            file {
                beforeMerged {
                    // 既存の設定内容をクリア
                    facets.clear()
                }

                whenMerged {
                    // ファセットの種類、ファセット名でソート
                    facets.sort { facet1, facet2 ->
                        if (facet1.type == facet2.type) {
                            facet1.name <=> facet2.name
                        }
                        else {
                            facet1.type.name() <=> facet2.type.name()
                        }
                    }
                }
            }
        }
    }
}

//-----------------------------------------------------------------------------
//    Tasks
//-----------------------------------------------------------------------------
// JAR ファイルを構築するタスク
tasks.jar {
    // マニフェストファイル
    manifest {
        attributes('Created-By': GradleVersion.current(),
                   'Build-Jdk': System.getProperty('java.vm.version'))
    }
}

// JUnit でテストするタスク
tasks.test {
    useJUnitPlatform()

    ignoreFailures = true

    // JVM オプションに JMockit のモジュール読み込みを追加
    jvmArgs("-javaagent:${configurations.jmockit.files.first().path}")

    jacoco {
        destinationFile = file("${buildDir}/jacoco/jacocoTest.exec")
        classDumpDir = file("${buildDir}/jacoco/classpathdumps")
    }
}

// Lombok による変換後のソースコードを生成するタスク
tasks.register('delombok', DelombokTask) {
    description = 'Generates delomboked sources.'

    classpath += compileJava.classpath

    ext.outputDir = file("${buildDir}/${name}")

    sourceSets.main.java.srcDirs.each {
        args(it, '-d', outputDir)
    }

    doFirst {
        outputDir.deleteDir()
    }
}

// Lombok による変換後のソースコードを生成する際のヘルプを表示するタスク
tasks.register('delombokHelp', DelombokTask) {
    description = 'Displays the help about delomboking.'

    args('--help')
}

// Lombok による変換後のソースコードを生成する際のフォーマットに関するヘルプを表示するタスク
tasks.register('delombokFormatHelp', DelombokTask) {
    description = 'Displays the help about the format of delomboking.'

    args('--format-help')
}

// Javadoc のタスク
tasks.javadoc {
    dependsOn(delombok)

    source = delombok.outputDir
    failOnError = false

    options {
        encoding = StandardCharsets.UTF_8
        charSet = StandardCharsets.UTF_8
        author = true
        links(
            'https://commons.apache.org/proper/commons-beanutils/apidocs/',
            'https://commons.apache.org/proper/commons-codec/apidocs/',
            'https://commons.apache.org/proper/commons-collections/apidocs/',
            'https://commons.apache.org/proper/commons-io/javadocs/api-release/',
            'https://commons.apache.org/proper/commons-lang/apidocs/',
            'https://docs.oracle.com/javase/jp/17/docs/api/',
            'https://google.github.io/guava/releases/31.0.1-jre/api/docs/',
            'https://jakarta.ee/specifications/platform/8/apidocs/',
            'https://javadoc.io/doc/io.github.classgraph/classgraph/',
            'https://javadoc.io/doc/jp.co.future/uroborosql/',
            'https://projectlombok.org/api/',
            'https://www.jooq.org/javadoc/latest/',
            'https://www.jooq.org/products/jOO%CE%BB/javadoc/latest/',
            'https://www.slf4j.org/apidocs/'
        )
    }
}

// Eclipse プロジェクトのタスク
tasks.eclipse {
    doFirst {
        // Buildship の設定
        file('.settings/org.eclipse.buildship.core.prefs').withWriter {
            it.println("connection.project.dir=${projectDir.relativePath(rootDir)}")
            it.println('eclipse.preferences.version=1')
        }
    }
}
